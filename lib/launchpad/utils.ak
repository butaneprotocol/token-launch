use aiken/builtin
use aiken/cbor

/// Checks that a provided integer, in bytes, is greater than a bytearray, in bytes
pub fn integer_gt_bytearray(int: Int, ba: ByteArray) {
  int > do_bytearray_to_integer(0, ba, builtin.length_of_bytearray(ba), 0)
}

pub fn bytearray_to_integer(ba: ByteArray) {
  let len = builtin.length_of_bytearray(ba)
  if len != 0 {
    expect builtin.index_bytearray(ba, 0) != 0
    do_bytearray_to_integer(0, ba, len, 0)
  } else {
    0
  }
}

fn do_bytearray_to_integer(int: Int, ba: ByteArray, len: Int, idx: Int) {
  if idx == len {
    int
  } else {
    do_bytearray_to_integer(
      int * 256 + builtin.index_bytearray(ba, idx),
      ba,
      len,
      idx + 1,
    )
  }
}

pub fn assert(bool: Bool, str: String) {
  if bool {
    bool
  } else {
    fail str
  }
}

test zero() {
  trace cbor.diagnostic(#[])
  True
}

test gt_0() {
  integer_gt_bytearray(1, #[])
}

test gt_1() {
  integer_gt_bytearray(100, #[99])
}

test ngt_0() {
  !integer_gt_bytearray(0, #[])
}

test ngt_1() {
  !integer_gt_bytearray(99, #[99])
}

test ngt_2() {
  !integer_gt_bytearray(99, #[100])
}

test gt_massive() {
  // trace builtin.decode_utf8(#[100])
  // trace builtin.decode_utf8(
  //   integer_to_bytearray(100 + 256 * 101 + 256 * 256 * 102),
  // )
  // trace cbor.diagnostic(integer_to_bytearray(99999999))
  // trace cbor.diagnostic(#[100])
  // True
  integer_gt_bytearray(99999999, #[100]) == True
}

test ngt_massive() {
  !integer_gt_bytearray(

    "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
  )
}

test gt_massive_2() {
  integer_gt_bytearray(

    // 209967825318819964754042830942088834621127562266246657596537558058683908317492735966933442622042243083577640646188510693075680739990817530620730848739669421694139365600828462820153409143023629022998103152332321348329759341397099063469520166734254196059892481627050401008196180986702768522466372959325635298221596986146943501932138112471099415263272682377466584945604588112695631729846117644372863011647552048381799129889032574395434042938229431676517251695763050822438247474630284131713910471630778269695
    #"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
  ) == True
}

test ngt_massive_2() {
  integer_gt_bytearray(

    // 53751763281617910977034964721174741663008655940159144344713614863023080529278140407534961311242814229395876005424258737427374269437649287838907097277355371953699677593812086481959272740614049029887514406997074265172418391397657360248197162683969074191332475296524902658098222332595908741751391477587362636344728828453617536494627356792601450307397806688631445746074774556850081722840606116959452930981773324385740577251592339045231114992186734509188416434115341010544191353505352737718761080737479237042175
    #"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
  ) == False
}

test byte_to_int1() {
  let x = #"123456abcdef"

  bytearray_to_integer(x) == 20016001699311
}

test byte_to_int2() fail {
  let x = #"00123456abcdef"

  bytearray_to_integer(x) == 20016001699311
}

test byte_to_int3() {
  let x = #"0123456abcdef0"

  bytearray_to_integer(x) == 320256027188976
}

test byte_to_int4() {
  let x = #"0100"

  bytearray_to_integer(x) == 256
}

test byte_to_int5() {
  let x = #"ff"

  bytearray_to_integer(x) == 255
}

test byte_to_int6() {
  let x = #""

  bytearray_to_integer(x) == 0
}
